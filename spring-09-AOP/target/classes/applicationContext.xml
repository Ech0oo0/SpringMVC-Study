<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userServiceImpl" class="spring.aop.learn.UserServiceImpl"/>
    <bean id="afterLog" class="spring.aop.log.AfterLog"/>
    <bean id="log" class="spring.aop.log.Log"/>

    <!-- 方式一：使用原生的Spring API接口 -->
    <!-- 配置AOP:需要导入AOP的约束 -->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 切入点：execution(修饰符 返回值 包名.类名/接口名.方法名(参数列表))&ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* spring.aop.learn.UserServiceImpl.*(..))"/>-->

<!--        &lt;!&ndash; 执行环绕增强： &ndash;&gt;-->
<!--        &lt;!&ndash; 将 ”log“ 和 “afterLog“ 类分别切入到 ”pointcut“ 方法前后&ndash;&gt;-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->

<!--    </aop:config>-->



    <!-- 方式二：自定义类 -->
<!--    <bean id="diy" class="spring.aop.diy.DiyPointCut"/>-->

<!--    <aop:config>-->
<!--        &lt;!&ndash; 自定义切面，ref要引用的类 &ndash;&gt;-->
<!--        <aop:aspect ref="diy">-->
<!--            &lt;!&ndash; 切入点 &ndash;&gt;-->
<!--            <aop:pointcut id="pointcut" expression="execution(* spring.aop.learn.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash; 增强（Advice） &ndash;&gt;-->
<!--            <aop:before method="argsBefore" pointcut-ref="pointcut"/>-->
<!--            <aop:after method="argsAfter" pointcut-ref="pointcut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <!-- 方式三：使用注解方式实现 -->
    <bean id="AnnotationPointCut" class="spring.aop.diy.AnnotationPointCut"/>
    <!-- 开启注解驱动支持 -->
    <aop:aspectj-autoproxy/>
</beans>